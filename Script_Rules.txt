Script_Rules.txt

NOTE: we are using LUA 5.3
	- Support all the standard lua syntax (section 3 of https://www.lua.org/manual/5.3/),
		All available standard functions in {string, math, table} 
		Also io.open, io.input, io.type, io.read, io.lines and io.close
		And os.clock, os.date, os.difftime, os.getenv, os.time, os.tmpname
		Plus {assert, pairs, ipairs, print, tonumber, tostring, type}
			can be used in the script 

Some definitions/comments:
	- in this document, "==" means "is equal to"
	- EXML files are closely related to XML files but are not the same
	- the TOP level is always <Data template="something"> AND this value is NOT used by the tool
	- Each level ends with </Property> except the TOP level which ends with </Data>
	- Every new level (SECTION) starts with a line ending in [">] (never with a line ending in [" />])
	- a SECTION is defined as "all the lines" from the beginning [">] to the ending </Property> line
		(so a SECTION is at least 3 lines long)
	- a SECTION can have one or more sub-SECTIONs

Using the "ModScriptCollection\LearningExamples\StandardSchemeExtended.lua" script
	in the ModScriptCollection\LearningExamples folder as an example:

NMS_MOD_DEFINITION_CONTAINER = {
	- The Master Table (it defines the script that will be processed by this tool)
	- Always required
	- the order of members is not important
	- members of NMS_MOD_DEFINITION_CONTAINER are:
		- MOD_FILENAME		REQUIRED
		- MOD_AUTHOR		OPTIONAL
		- MOD_DESCRIPTION	OPTIONAL
		- NMS_VERSION		OPTIONAL
		- MODIFICATIONS		see below
		- ADD_FILES			see below
}

MOD_FILENAME = {
	- a member of NMS_MOD_DEFINITION_CONTAINER
	- a STRING, the name of the pak file created by the tool
		ex.: 	["MOD_FILENAME"] 		= "ZZZsome.pak",
		(unless a combined mod is created, then the name may not be used)
	- Always required
}

MOD_AUTHOR, MOD_DESCRIPTION and NMS_VERSION = {
	- members of NMS_MOD_DEFINITION_CONTAINER
	- a STRING
		ex.: 	["MOD_AUTHOR"] 			= "ItIsMe",
				["MOD_DESCRIPTION"]		= "anything goes",
				["NMS_VERSION"]			= "1.77",
	- use for reference only
	- These members are all optional
}

MODIFICATIONS = {
	- a member of NMS_MOD_DEFINITION_CONTAINER
	- a table containing one or many groups of tables
	- can be used with or without ADD_FILES
	- is optional when ADD_FILES is used

	- the order of members is not important
	- members of MODIFICATIONS are:
		- PAK_FILE_SOURCE	OPTIONAL
		- MBIN_CHANGE_TABLE	REQUIRED
}

PAK_FILE_SOURCE = {
	- a member of MODIFICATIONS
	- IS NO LONGER REQUIRED
	- (VERY OPTIONAL NOW) the NMS PAK "path and name" involved as a STRING 
	- always an original name from the NMS/PCBANKS folder
	- the PAK_FILE_SOURCE "path and name" will be provided (and displayed) by this tool
}

MBIN_CHANGE_TABLE = {
	- a member of MODIFICATIONS
	- a table of MBIN_FILE_SOURCE(s) and EXML_CHANGE_TABLE(s)
		to apply to the MBIN_FILE_SOURCE file(s)

	- the order of members is not important
	- members of MBIN_CHANGE_TABLE are:
		- MBIN_FILE_SOURCE	REQUIRED
		- REGEXBEFORE		OPTIONAL
		- EXML_CHANGE_TABLE	REQUIRED
		- REGEXAFTER		OPTIONAL
}

MBIN_FILE_SOURCE = {
	- is a member of MBIN_CHANGE_TABLE
	- alternate syntax #1: a NMS MBIN path STRING, as in "METADATA\SIMULATION\SCENE\EXPERIENCESPAWNTABLE.MBIN",
	
	- alternate syntax #2: a table of NMS MBIN path STRINGS,
		as in {
				"METADATA\SIMULATION\SOLARSYSTEM\BIOMES\BARREN\BARRENHQOBJECTSFULL.MBIN",
				"METADATA\SIMULATION\SOLARSYSTEM\BIOMES\BARREN\BARRENOBJECTSDEAD.MBIN",
				"METADATA\SIMULATION\SOLARSYSTEM\BIOMES\BARREN\BARRENOBJECTSFULL.MBIN",
				...
			  },
			  
	- alternate syntax #3: a table of tables of NMS MBIN path STRINGS and NEW_PATH_FILENAMES STRINGS
		see NEW_PathFilename.lua for an example of use,
		as in {
				{"METADATA\SIMULATION\SOLARSYSTEM\BIOMES\PLACEMENTVALUES\SPAWNDENSITYLIST.MBIN", "NEWPATH\temp1\temp2\My.GLOBALS.MBIN"},
				...
			  },
		this allows you to create a new MBIN file (My.GLOBALS.MBIN) in any folder you like (NEWPATH\temp1\temp2\) 
		BASED on an original NMS pak file (SPAWNDENSITYLIST.MBIN)
		
		Note: that the create/rename part happens after the end of processing the whole MBIN_FILE_SOURCE section
}

REGEXBEFORE = {
	- is a member of MBIN_CHANGE_TABLE
	- is a table of (two STRINGs)table(s)
	- if use, will invoque a regex utility to process the EXML file BEFORE any script processing
	- the table is of the form {{"ToFindRegex","ToReplaceRegex"},...},
		ex.: ["REGEXBEFORE"] = 
						{
							{[[((.*Unknown.*)(True))]],[[\2False]]},
							...
						},
	- sed regex rules apply (see https://www.gnu.org/software/sed/)
	- is optional
}

REGEXAFTER = {
	- same as REGEXBEFORE, see above
	- if use, will invoque a regex utility to process the EXML file AFTER the script processing
	- the table is of the form {{"ToFindRegex","ToReplaceRegex"},...},
		ex.: ["REGEXAFTER"] = 
						{
							{[[((.*Unknown.*)(True))]],[[\2False]]},
							...
						},
	- sed regex rules apply (see https://www.gnu.org/software/sed/)
	- is optional
}

EXML_CHANGE_TABLE = {
	- is a member of MBIN_CHANGE_TABLE
	- is a table of table(s) and STRINGs
	
	- the order of members is not important
	- members of MBIN_CHANGE_TABLE are:
		- SPECIAL_KEY_WORDS		OPTIONAL
		- PRECEDING_KEY_WORDS	OPTIONAL
		- MATH_OPERATION		OPTIONAL
NEW		- INTEGER_TO_FLOAT		OPTIONAL
		- REPLACE_TYPE			OPTIONAL
		- VALUE_MATCH			OPTIONAL
		- VALUE_MATCH_TYPE		OPTIONAL
		- LINE_OFFSET			OPTIONAL
		- VALUE_CHANGE_TABLE	OPTIONAL
		- ADD					OPTIONAL
		- REMOVE				OPTIONAL
}

SPECIAL_KEY_WORDS = {
	- is a member of EXML_CHANGE_TABLE
	- a TABLE of (one or multiple) two STRINGs
	- "", or {}, or {"",}, ==> all these mean: no SPECIAL_KEY_WORDS to use
			ex.: ["SPECIAL_KEY_WORDS"] = {"","",...},
	- {"Property name1","value1",}, ==> special_key_word pair #1
		that will be used optionally with the PRECEDING_KEY_WORDS to help define the SECTION
		we are looking for
	- One or more pairs can be used of the form {"Property name1","value1","Property name2","value2",...},
	- "Property name1","value1" defined a SECTION#1 AND "Property name2","value2" defined a sub-SECTION of SECTION#1 and so on
	- "value2" here (the last of the "values" when multiple pairs are used) can be "IGNORE" (useful in the case where NMS changes that value later)
		see the script LearnMoreWords.lua as an example...
	- If the line pointed to by the special_key_word pair(s) is found, it will be used by LINE_OFFSET (if any)
	- Works alone or with PRECEDING_KEY_WORDS (see OPTIONAL use below and MiningLaserSpeed.lua for example)
	- If SPECIAL_KEY_WORDS are used, they are processed BEFORE the PRECEDING_KEY_WORDS
}

PRECEDING_KEY_WORDS = {
	- is a member of EXML_CHANGE_TABLE
	- a STRING or (TABLE of STRINGs)
	- "", or {}, or {"",}, ==> all these mean: no key_words to search (so search the whole file)
	- {"key1","key2","key3",...}, ==> are a list of key_words inside an EXML
			ex.: ["PRECEDING_KEY_WORDS"] = {"","",...},
	- LEVEL 0 being the whole EXML file SECTION
	- LEVEL key1, key2, ... defined sub-group heads (SECTIONs) in the EXML file hierarchy (the line ends in [">] )
	- Skipping one or more LEVEL can work, specially if you want to specify many sections (see REPLACE_TYPE)
	- works alone and with SPECIAL_KEY_WORDS
	- UNLESS used like in OPTIONAL below, PRECEDING_KEY_WORDS are ALWAYS a LEVEL key (the line ends in [">] )
	
	- ALTERNATE USE: when using SPECIAL_KEY_WORDS, you can use a single "preceding_key_word" word to specify a value to look for
		inside the SECTION defined by the SPECIAL_KEY_WORDS presence
		If the single "preceding_key_word" word is not found in that SECTION, the whole SECTION will be used
		The "preceding_key_word" can be any name or value inside that SECTION (much better if UNIQUE in that SECTION)
		(see MiningLaserSpeed.lua or Multi_PAK_Multi_MBIN_Example_Mod.lua for example)

********  Example EXML with LEVELs and possible keys:

<Data template="GcRewardTable">               	--The LEVEL 0 key (no need to use it)
	<Property name="GenericTable">            		--a LEVEL 1 key (could be the start of a SECTION, this one has no children)
	<Property value="GcGenericReward.xml">          	    --another LEVEL 1 key, start of a SECTION with children
		<Property name="Id" value="VEHICLE_SCAN" />   	    	--is a child, possible SPECIAL_KEY_WORDS pair, NEVER a key
		<Property name="Common" value="Gc...List.xml">	    --a LEVEL 2 key, start of a SECTION with children
			<Property name="Reward" value="GiveAll" />      	--is a child, possible SPECIAL_KEY_WORDS pair, NEVER a key
			<Property name="Count" value="Vector2f.xml">    --a LEVEL 3 key, start of a SECTION with children
				<Property name="x" value="1" />			    	--is a child, NEVER a key
				<Property name="y" value="1" />			    	--is a child, NEVER a key
			</Property>									    --end of a LEVEL /3 SECTION
			<Property name="List" />                        	--is a child, NEVER a key
		</Property>                                   	    --end of a LEVEL /2 SECTION
	</Property>											    --end of a LEVEL /1 SECTION
</Data>                                             	    --end of LEVEL /0

******* End of example

	- "key2" is allways at the same or a higher level than "key1" in the EXML file hierarchy and so on...
		if (keyi LEVEL) == x; (keyi+1 LEVEL) == x + (1 or more); (keyi+2) LEVEL == (keyi+1 LEVEL) + (1 or more); ...
	
	- taken together, these key_words define one SECTION of lines inside the EXML file
	
	- ONLY <"start of a level"> line's <"Property name" or "Property value"> info can be used as key_words
		***** see OPTIONAL above for "preceding_key_word" exception
		
	- REMEMBER: Every level starts with a line ending in [">] (never with a line ending in [" />])
	
	- PRECEDING_KEY_WORDS rarely define a single line in the EXML file
		but the start line of the group found can be used as the base for LINE_OFFSET
	
	- If that is not enough to narrow down the search for the right SECTION,
		we can use a <SPECIAL_KEY_WORDS pair> to help define the SECTION we are looking for
		
		- These SPECIAL_KEY_WORDS are defined in SPECIAL_KEY_WORDS (see above)
		- They represent a distinct Property/Value pair that help identify the exact SECTION
			of lines we are looking for in the EXML file
			
		- Using NMS_REALITY_GCPRODUCTTABLE.EXML as an example:
			This EXML is madeof a big bunch of groups all starting with <Property value	="GcProductData.xml">
				They are all inside <Property name="Table"> group
				So "GcProductData.xml" is NOT a good key_word to use here
				but in the next line or so there is <Property name="Id" value="CASING" /> (and some other lines)
				that can help define the SECTION where we want to make the changes to the EXML
				This is were the SPECIAL_KEY_WORDS "Id" and "CASING" come in play, we add them as SPECIAL_KEY_WORDS
				and this tool will find the line SECTION 5-81 to be where we want to make changes
			
			AND we can use a single "preceding_key_word" word to specify a value to look for
			inside the SECTION defined by the SPECIAL_KEY_WORDS presence
			(see OPTIONAL above for "preceding_key_word" exception)
			(see also MiningLaserSpeed.lua or Multi_PAK_Multi_MBIN_Example_Mod.lua for example)
		
		- Note that you can specify as many other key_word as required to help narrow down
			the SECTION (like "Table") in the case where this EXML file had more than
			one major group ("Table" here)
}

NOTE: "WHERE_KEY_WORDS" is NOT YET IMPLEMENTED, it may NOT BE REQUIRED
			WHERE_KEY_WORDS = {
				- a table of (two STRINGs)table(s)
					ex.: 	["WHERE_KEY_WORDS"] = 	
							{
								{"Property name/value1","WhereValue1",},
								{"Property name/value2","WhereValue2",},
								...
							},
				- a table containing one or many "two string" table describing:
					a "Property name" or "Property value" we want to check the value of
					and a "WhereValue" that will be compared to the original one in the EXML file
				- IF the "Property name/value" has that "WhereValue" in the section specified by
					SPECIAL_KEY_WORDS and/or PRECEDING_KEY_WORDS then that section will be use
					by the script to update the EXML, otherwise that section is skipped
				- is optional
			}
NOTE: "WHERE_KEY_WORDS" is NOT YET IMPLEMENTED, it may NOT BE REQUIRED

MATH_OPERATION = {
	- is a member of EXML_CHANGE_TABLE
	- "" or a STRING composed of
	- == one of {+, -, *, /} + (a SUFFIX and an endString)(optional) OR (a SUFFIX and NUMBER_OF_LINES)(optional)
		ex.: 	["MATH_OPERATION"] 	= "*",
			or	["MATH_OPERATION"] 	= "*F:MaxAmount",
			or	["MATH_OPERATION"] 	= "*L:5",
				
	- After retrieving the LINE pointed to by the keywords (AND possibly redirected by LINE_OFFSET):

	- {+, -, *, /} used alone will apply the math operation between the VALUE at that LINE and the script "newvalue". Use as the mod "newvalue"
	
	- with SUFFIX == one of {F:, FB:} AND
		endString == a Property Name STRING or "IGNORE" (like [MaxAmount] here: <Property name="MaxAmount" value="300" />)
		  Note: the value pointed to MUST be a numerical value (NOT a text string like [ALLOY1] here <Property name="Value" value="ALLOY1" />)

		F: == Fetch Forward from the LINE for endString and get the value on that new line
		FB: == Fetch Backward from the LINE for endString and get the value on that new line

		now apply the math operation between this value and the script "newvalue".  Use as the mod "newvalue"

	- WARNING If you can avoid using {L:, LB:}, it is better. A one line added/removed by NMS in between would kill the script
	- with SUFFIX == one of {L:, LB:} AND NUMBER_OF_LINES
		L: == Lookup Forward from the LINE PLUS NUMBER_OF_LINES and get the value on that new line
		LB: == Lookup Backward from the LINE MINUS NUMBER_OF_LINES and get the value on that new line
		
		now apply the math operation between this value and the script "newvalue".  Use as the mod "newvalue"
	
	- is optional
}

INTEGER_TO_FLOAT = {
	- is a member of EXML_CHANGE_TABLE
	- a STRING
	- can have one of these values: {nil, "", "FORCE", "PRESERVE"}
	- DEFAULT value is "PRESERVE"
	- "FORCE" will change the INTEGER value to a FLOAT if necessary
	- "PRESERVE" will keep the same type of value as before the operation
		A FLOAT will still be a FLOAT
		An INTEGER will still be an INTEGER (rounding up the value if necessary)
	- is optional
}

REPLACE_TYPE = {
	- is a member of EXML_CHANGE_TABLE
	- a STRING
	- can have one of these values: {nil, "", "ALL", "ALLFOLLOWING", "RAW", "ADDAFTERSECTION"}
		ex.: 	["REPLACE_TYPE"] 	= "ALL",
	- == nil or "" will replace only the first line that match the key_words
	- == "ALL" will replace ALL lines that match the VALUE_CHANGE_TABLE pairs
	- == "ALLFOLLOWING" will replace ALL lines that match the VALUE_CHANGE_TABLE pairs FOLLOWING 
		the most recent replaced line (after the first replacement obviously)
	
	- == "ALL" with "some key_words" will replace ALL lines that match the VALUE_CHANGE_TABLE pairs
		INSIDE the group(s) defined by the key_words
	
	- When used with ADD, REPLACE_TYPE can only be "ADDAFTERSECTION" to specify to add the TEXT_TO_ADD AFTER the SECTION
		specified by the SPECIAL_KEY_WORDS and the VALUE_CHANGE_TABLE property

	- == RAW replaces property with value on ALL lines where property is found
		SPECIAL_KEY_WORDS and PRECEDING_KEY_WORDS can be use to limit the SECTION
		
		WARNING: RAW IS POWERFULL AND DANGEROUS, EVEN DESTRUCTIVE IF NOT USED CORRECTLY
		***** USE WITH GREAT CARE *****
		
		>>> see the "RAW_REPLACEMENT.lua" script in the ModScriptCollection\LearningExamples\Commented 
			folder for some more details <<<
		
	- is optional
}

VALUE_MATCH = {
	- is a member of EXML_CHANGE_TABLE
	- a STRING
		ex.: 	["VALUE_MATCH"] 	= "Snow",
			or	["VALUE_MATCH"] 	= "5",
	- a literal value (a string or a number) from the EXML file that
		matches exactly the "original value" we want to change
		like if we want to change only values when the "original value" is "5" or "Snow" or "False"
	- can be useful when the tool has difficulty finding the right one
	- see CreatureSizeAndSpawnRateIncrease.lua and MoreScreenFilters.lua as examples
	- is optional
}

VALUE_MATCH_OPTIONS = {
	- is a member of EXML_CHANGE_TABLE
	- a STRING
		ex.: 	["VALUE_MATCH_OPTIONS"] 	= "~=",
	- IF VALUE_MATCH value is "" or does not exist, VALUE_MATCH_OPTIONS have no effect
	- forces the tool to match this options for the "newvalue"
		when searching for the "Property name/value" (see VALUE_CHANGE_TABLE below)
	- If VALUE_MATCH is a STRING:
		- To replace the VALUE on ALL lines defined by the keywords: 
			- that MATCH VALUE_MATCH,                  use "=" (default option) 
			- that DO NOT MATCH VALUE_MATCH,           use "~="
	- If VALUE_MATCH is a NUMBER:
		- To replace the VALUE on ALL lines defined by the keywords: 
			- that MATCH VALUE_MATCH,                  use "=" (default option) 
			- that DO NOT MATCH VALUE_MATCH,           use "~="
			- that is less than VALUE_MATCH,           use "<"
			- that is les or equal to VALUE_MATCH,     use "<="
			- that is greater than VALUE_MATCH,        use ">"
			- that is greater or equal to VALUE_MATCH, use ">="			
	- is optional
}

VALUE_MATCH_TYPE = {
	- is a member of EXML_CHANGE_TABLE
	- a STRING
		ex.: 	["VALUE_MATCH_TYPE"] 	= "NUMBER",
	- IF VALUE_MATCH value is "" or does not exist, VALUE_MATCH_TYPE have no effect
	- can be "NUMBER" or "STRING" only
	- forces the tool to match this type for the "newvalue"
		when searching for the "Property name/value" (see VALUE_CHANGE_TABLE below)
	- is optional
}

LINE_OFFSET = {
	- is a member of EXML_CHANGE_TABLE
	- WARNING: if you can avoid LINE_OFFSET, it is better. A one line added/removed by NMS in between would kill the script
	- EXCEPT where a list of lines like <Property value="4" /> as in GCFLEETGLOBALS.GLOBAL.EXML are used and you want
		to alter some particular line or lines
		- For a script example see LodDistanceScale.lua

	- a STRING representing a number
		ex.: 	["LINE_OFFSET"] 	= "-15",
	- "" or (if used) +/- a STRING integer number of lines from the found line like "+15"
	- If a line is found using the SPECIAL_KEY_WORDS, it is used as the stating point
	- Otherwise, the start line of the group found using the PRECEDING_KEY_WORDS will be used
	- NOTE: with ADD, the line used to ADD is the NEXT line
	- NOTE: with REMOVE, the line used (to define the SECTION or the LINE to REMOVE) is the line found
	- is optional
}

VALUE_CHANGE_TABLE = {
	- is a member of EXML_CHANGE_TABLE
	- a table of (two STRINGs)table(s)
		ex.:	["VALUE_CHANGE_TABLE"] 	= 	
				{
					{"Property name/value1","newvalue1",},
					...
				},	
	- {"Property name/value1","newvalue1",}, {"Property name/value2","newvalue2",}, ...
	- a table containing one or many "two string" table describing:
		- a "Property name" or "Property value" we want to change the value of
		- and a "newvalue" that will replace the original one in the EXML file
		- one or the other can be "IGNORE" in some cases (like when we use LINE_OFFSET)
		- syntax examples:  {"A","IGNORE",}, or  {"IGNORE","IGNORE",}, or  {"IGNORE","A",},
	- a newvalue == "IGNORE" will make the tool SKIP that line, 
		doing NO exchange at all and continuing processing the next Property name/value
	- is optional if ADD is used
}

ADD = {
	- is a member of EXML_CHANGE_TABLE
	- Can be of type "string" or [[long string]] or a user named variable of those types (like TEXT_TO_ADD)
		ex.:	["ADD"] = "a short string",
			or	["ADD"] = [[a 
								multi-line 
									string]],
			or	["ADD"] = MY_USER_NAME_VARIABLE,
	- Used to ADD lines or SECTION inside the EXML file 	
	- Can be used with a user named variable defined before the opening MODIFICATIONS SECTION
	- See the ADD_REMOVE_TEXT_EXAMPLE.lua example in "ModScriptCollection\LearningExamples\Commented\" folder
	- See also the LearnMoreWords.lua script in "ModScriptCollection" folder
	- Can be used with SPECIAL_KEY_WORDS, PRECEDING_KEY_WORDS, LINE_OFFSET,
		VALUE_MATCH, VALUE_MATCH_TYPE and REPLACE_TYPE
	- Used with LINE_OFFSET, the TEXT_TO_ADD is added EXACTLY AFTER the line found
		WARNING: if you can avoid LINE_OFFSET, it is better. A one line added/removed by NMS in between would kill the script
	- Used with REPLACE_TYPE == "ADDAFTERSECTION", will find the end of the SECTION and then ADD the TEXT_TO_ADD
	- "Property name/value1" of VALUE_CHANGE_TABLE can be used to specify a sub-SECTION of the SPECIAL_KEY_WORDS + PRECEDING_KEY_WORDS SECTION
	- is optional
	
	NOTE:
	  - PLEASE remember that if you use both ADD and REMOVE inside the same EXML_CHANGE_TABLE
	  - the TEXT will be "added" AND "removed" (the LINE or the SECTION)	
}                                                               	
                                                               
REMOVE = {
	- is a member of EXML_CHANGE_TABLE
	- a STRING
		ex.:	["REMOVE"] = "SECTION",
	- "", or {}, or {"",}, ==> all these mean: no REMOVE to use
	- == "SECTION", the SECTION will be REMOVEd
	- == "LINE", the line will be REMOVEd
	- SPECIAL_KEY_WORDS, PRECEDING_KEY_WORDS, LINE_OFFSET 
		with VALUE_MATCH, VALUE_MATCH_TYPE and REPLACE_TYPE can be use
	- with LINE_OFFSET, the REMOVE action happens AT the line found for LINE or the SECTION
	- is optional 

		WARNING: REMOVE IS POWERFULL AND DANGEROUS, EVEN DESTRUCTIVE IF NOT USED CORRECTLY
		USE WITH GREAT CARE
	
	NOTE:
	  - PLEASE remember that if you use both ADD and REMOVE inside the same EXML_CHANGE_TABLE
	  - the TEXT will be "added" AND "removed" (the LINE or the SECTION)
}
															   
ADD_FILES = {
	- a member of NMS_MOD_DEFINITION_CONTAINER

	- can be used with or without MODIFICATIONS
	- is optional if MODIFICATIONS is used
	- see StandardSchemeExtended.lua and ADD_NEW_FILES_EXAMPLE.lua scripts for more details

	- the order of members is not important
	- members of ADD_FILES are:
		- FILE_DESTINATION		OPTIONAL
		- EXTERNAL_FILE_SOURCE	OPTIONAL
		- FILE_CONTENT			OPTIONAL
}

_________________________________________________________________________________________
ADVANCED SCRIPT RULES:

Tip #1: 
	What to do when your script spends a lot of time in BuildMod.bat at the line:
	">>> B: Executing Lua with LoadScriptAndFilenames.lua, Please wait..."
	
	Your script probably does a LOT of pre-processing before the NMS_MOD_DEFINITION_CONTAINER definition.
	You can add these code lines in your script 
	to skip the long executing code and still load the container:
	
	--top of example script (see SkippingLongFirstPass.lua in folder ModScriptCollection\LearningExamples\Advanced)
	
--===============================================================================
--at the top of the script:
--add thess lines to bypass the first pass evaluation of the script
DoFirstPass = (os.getenv("SkipScriptFirstCheck") ~= nil)
--this line is used to jump over all the lengthy code BEFORE the NMS_MOD_DEFINITION_CONTAINER
if not DoFirstPass then
--===============================================================================

  local function sleep(s)
	if s==nil then s=1 end
	local i=os.clock()+s 
	print("        waiting for " .. s .. " seconds ...") 
	while(os.clock()<i) do 
	  --print("wait for " .. i-clock() .. " seconds") 
	end
	print("         finished waiting for " .. s .. " seconds") 
  end
		
	--example of long execution code here
	--this will wait for 30 seconds, simulating a long time to execute
	sleep(30)
	
	ANIM_TEMPLATE_ALL = ""  			--used in the CONTAINER
	ACTION_TRIGGER_COMPONENT = ""		--used in the CONTAINER
	QUICK_ACTION_BUTTON_ALL = ""		--used in the CONTAINER
    SUPER_USER_VARIABLE = ""        --not used in container, no need to duplicate below
	--end of example of long execution code here
	
--===============================================================================
--Add these lines just before the NMS_MOD_DEFINITION_CONTAINER
else  --if not DoFirstPass then
  print("     Skipping first pass check!")
  
  --here create ALL "empty user variables" used in EXML_CHANGE_TABLE
  --in order for the script to be valid
  ANIM_TEMPLATE_ALL = ""  			--this user variable is used in the CONTAINER
  ACTION_TRIGGER_COMPONENT = ""		--this user variable is used in the CONTAINER
  QUICK_ACTION_BUTTON_ALL = ""		--this user variable is used in the CONTAINER
  --...                               --as many as there are in CONTAINER
end  --if not DoFirstPass then
--===============================================================================
	
	NMS_MOD_DEFINITION_CONTAINER = 
	{
	["MOD_FILENAME"] 			= "SkippingLongFirstPass.pak",
	["MOD_AUTHOR"]				= "Wbertro",
	["MOD_DESCRIPTION"]			= "",
	["NMS_VERSION"]				= "2.0+",
	["MODIFICATIONS"] 			= 
		{
			{
				["MBIN_CHANGE_TABLE"] = 
				{  
					{
						["MBIN_FILE_SOURCE"] 	= "MODELS\COMMON\PLAYER\PLAYERCHARACTER\PLAYERCHARACTER\ENTITIES\PLAYERCHARACTER.ENTITY.MBIN",
						["EXML_CHANGE_TABLE"] = 
						{
							{
								["PRECEDING_KEY_WORDS"] = {"Anims"}, 
								["LINE_OFFSET"] 		= "+0",
								["ADD"] 				= ANIM_TEMPLATE_ALL, --a user variable
							},
							{
								["PRECEDING_KEY_WORDS"] = {"LodDistances"}, 
								["LINE_OFFSET"] 		= "-2",
								["ADD"] 				= ACTION_TRIGGER_COMPONENT, --a user variable
							}
						}
					},
					{
						["MBIN_FILE_SOURCE"] 	= "METADATA\UI\EMOTEMENU.MBIN",
						["EXML_CHANGE_TABLE"] 	= 
						{
							{
								["PRECEDING_KEY_WORDS"] = {"Emotes"}, 
								["LINE_OFFSET"] 		= "+0",
								["ADD"] 				= QUICK_ACTION_BUTTON_ALL, --a user variable
							}
						}
					},
				}
			},
		}
	}
	--NOTE: ANYTHING NOT in table NMS_MOD_DEFINITION_CONTAINER IS IGNORED AFTER THE SCRIPT IS LOADED
	--IT IS BETTER TO ADD THINGS AT THE TOP IF YOU NEED TO
	--DON'T ADD ANYTHING PASS THIS POINT HERE
	
	--end of example script


Tip #2:
	-In a loop, it is much faster to use a table to store strings and do a table.concat()
	  than to concatenate strings.  As an example:
	  
	  function UsingConcatenation() -- may take 50 sec to complete
		  local NbIteration = 200000
		  print("NbIteration = "..NbIteration)
		  local a = "MyString"
		  local b = a
		  for i=1,NbIteration do
			b = b..a
		  end
		  print(#b)
	  end
	  
	  function UsingTable()       -- takes only less than 1 sec to complete for the same result
		  local NbIteration = 200000
		  print("NbIteration = "..NbIteration)
		  local a = "MyString"
		  local T = {}
		  T[1] = a
		  for i=1,NbIteration do
			T[#T+1] = a
		  end
		  b = table.concat(T)
		  print(#b)
	  end
	  
	
Tip #3:
	-no entry yet
	
_________________________________________________________________________________________
DEPRICATED (do not use):

REPLACE_AFTER_ENTRY = {
	- NOT USED ANYMORE - XXXXX depricated XXXXX
	- is an older version of PRECEDING_KEY_WORDS (left for backward compatibility)
}


